/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package bilboka.messagebot

import bilboka.core.book.domain.Book
import bilboka.core.book.domain.FuelRecord
import bilboka.core.vehicle.Vehicle
import bilboka.core.vehicle.VehicleNotFoundException
import io.mockk.confirmVerified
import io.mockk.every
import io.mockk.junit5.MockKExtension
import io.mockk.verify
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

@ExtendWith(MockKExtension::class)
class FuelRecordGetterTest : AbstractMessageBotTest() {

    @Test
    fun sendGetLastRecord_repliedWithLastRecord() {
        val now = LocalDateTime.now()
        val book = Book(
            Vehicle(name = "En Testbil")
        )
        book.addRecord(
            FuelRecord(
                dateTime = now, amount = 30.0, costNOK = 300.0
            )
        )
        every { carBookExecutor.getBookForVehicle(any()) } returns book

        messagebot.processMessage("Siste testbil", senderID)

        verify {
            botMessenger.sendMessage(
                message = "Siste tanking av En Testbil: 30.0 liter for 300.0 kr (10.0 kr/l) ${
                    now.format(
                        DateTimeFormatter.ISO_DATE
                    )
                }",
                senderID
            )
        }
        confirmVerified(botMessenger)
    }

    @Test
    fun sendGetLastRecordWhenNoRecords_repliesSomethingUseful() {
        every { carBookExecutor.getBookForVehicle(any()) } returns Book(Vehicle(name = "En Testbil"))

        messagebot.processMessage("Siste testbil", senderID)

        verify {
            botMessenger.sendMessage(
                "Finner ingen tankinger for En Testbil",
                senderID
            )
        }
        confirmVerified(botMessenger)
    }

    @Test
    fun sendGetLastRecordWhenCarNotFound_repliesSomethingUseful() {
        every { carBookExecutor.getBookForVehicle(any()) } throws VehicleNotFoundException("Ops", "bil")

        messagebot.processMessage("Siste testbil", senderID)

        verify {
            botMessenger.sendMessage(
                any(),
                senderID
            )
        }
        confirmVerified(botMessenger)
    }

}
